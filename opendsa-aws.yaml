AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template Rails_Single_Instance: Create a Ruby on
  Rails stack using a single EC2 instance with a local MySQL database for
  storage. This template demonstrates using the AWS CloudFormation bootstrap
  scripts to install the packages and files necessary to deploy a Rails
  application. This example creates a simple hello world application from the
  template. **WARNING** This template creates an Amazon EC2 instance. You will
  be billed for the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: opendsa2
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: DBUser
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: DBPassword
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: DBRootPassword
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ac80df6eff0e70b5
    us-west-2:
      HVM64: ami-053bc2e89490c5ab7
    us-west-1:
      HVM64: ami-0d705db840ec5f0c5
    eu-west-1:
      HVM64: ami-089cc16f7f08c4457
    eu-west-2:
      HVM64: ami-00f6a0c18edb19300
    eu-west-3:
      HVM64: ami-0e11cbb34015ff725
    eu-central-1:
      HVM64: ami-0d359437d1756caa8
    eu-north-1:
      HVM64: ami-0f920d75f0ce2c4bb
    ap-southeast-1:
      HVM64: ami-063e3af9d2cc7fe94
    ap-southeast-2:
      HVM64: ami-0bc49f9283d686bab
    ap-south-1:
      HVM64: ami-02d55cb47e83a99a0
    us-east-2:
      HVM64: ami-0a63f96e85105c6d3

Resources:
  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          full_install:
            - install_and_enable_cfn_hup
            - install_dependencies
            - install_ruby_2_4_0
            - install_rails_4
            - install_mysql_5_7
            - create_opendsa_db
            - clone_install_opendsa
            - opendsa_database_connection
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets full_install --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        install_dependencies:
          files:
            /tmp/install_dependencies:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'
                  sudo apt-get update
                  sudo apt-get install -y curl gnupg build-essential libmysqlclient-dev dirmngr libnginx-mod-http-passenger
                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_ruby:
              command: /tmp/install_dependencies > /var/log/install_dependencies.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_ruby_2_4_0:
          files:
            /tmp/install_ruby:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'
                  source .bash_profile
                  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
                  curl -sSL https://get.rvm.io -o /tmp/rvm.sh
                  cat /tmp/rvm.sh | bash -s stable --rails
                  source /home/ubuntu/.rvm/scripts/rvm
                  rvm install 2.4
                  rvm --default use 2.4
                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_ruby:
              command: /tmp/install_ruby > /var/log/install_ruby.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_rails_4:
          files:
            /tmp/install_rails:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                gem install rails -v 4 --no-document
                gem install bundler:1.17.3 --no-document
                \curl -sSL https://deb.nodesource.com/setup_10.x -o /tmp/nodejs.sh
                cat /tmp/nodejs.sh | sudo -E bash -
                sudo apt-get update
                sudo apt-get install -y nodejs

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_rails:
              command: /tmp/install_rails > /var/log/install_rails.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_mysql_5_7:
          files:
            /tmp/install_mysql:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'
                source .bash_profile

                sudo apt-get install -y mysql-server-5.7

                sudo mysql <<SQL
                ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
                FLUSH PRIVILEGES;
                SQL

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_mysql:
              command: /tmp/install_mysql > /var/log/install_mysql.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        create_opendsa_db:
          files:
            /tmp/create_opendsa_db:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                mysql -uroot -proot <<SQL
                CREATE DATABASE opendsa DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                GRANT ALL PRIVILEGES ON opendsa.* to 'opendsa'@'localhost'  IDENTIFIED BY 'opendsa';
                FLUSH PRIVILEGES;
                SQL

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_create_opendsa_db:
              command: /tmp/create_opendsa_db > /var/log/create_opendsa_db.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        clone_install_opendsa:
          files:
            /tmp/clone_install_opendsa:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                cd /home/ubuntu
                git clone --depth=1 https://github.com/OpenDSA/OpenDSA.git
                cd OpenDSA
                make pull

                cd /home/ubuntu
                git clone --depth=1 https://github.com/OpenDSA/OpenDSA-LTI.git
                cd OpenDSA-LTI
                bundle install --deployment --without development test

                ln -s /home/ubuntu/OpenDSA /home/ubuntu/OpenDSA-LTI/public

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_clone_install_opendsa:
              command: /tmp/clone_install_opendsa > /var/log/clone_install_opendsa.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        opendsa_database_connection:
          files:
            /tmp/database.yml:
              content: !Sub |
                production:
                  adapter: mysql2
                  database: opendsa
                  username: opendsa
                  password: opendsa
                  host: localhost
                  strict: false

                development:
                    adapter: mysql2
                    database: opendsa
                    username: opendsa
                    password: opendsa
                    host: localhost
                    strict: false

              mode: '000500'
              owner: ubuntu
              group: ubuntu
            /tmp/secrets_init.yml:
              content: !Sub |
                production:
                  secret_key_base: prod_secret_string
                development:
                  secret_key_base: dev_secret_string
              mode: '000700'
              owner: ubuntu
              group: ubuntu
            /tmp/opendsa_dependencies:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                cd /home/ubuntu/OpenDSA-LTI

                mv -f /tmp/database.yml /home/ubuntu/OpenDSA-LTI/config/
                sed "s/prod_secret_string/$(bundle exec rake secret)/" /tmp/secrets_init.yml > /tmp/secrets_prod.yml
                sed "s/dev_secret_string/$(bundle exec rake secret)/" /tmp/secrets_prod.yml > /tmp/secrets.yml
                mv -f /tmp/secrets.yml /home/ubuntu/OpenDSA-LTI/config/

                chmod 700 config db
                chmod 600 config/database.yml config/secrets.yml

                RAILS_ENV=production
                bundle exec rake db:drop
                bundle exec rake db:create
                bundle exec rake db:schema:load
                bundle exec rake assets:precompile

                EOF

              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_opendsa_dependencies:
              command: /tmp/opendsa_dependencies > /var/log/opendsa_dependencies.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_nginx_passenger:
          files:
            /tmp/install_nginx_passenger:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                sudo apt-get install -y nginx
                sudo ufw allow 'Nginx HTTP'
                sudo ufw status

                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
                sudo apt-get install -y apt-transport-https ca-certificates

                sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main > /etc/apt/sources.list.d/passenger.list'
                sudo apt-get update

                if [ ! -f /etc/nginx/modules-enabled/50-mod-http-passenger.conf ]; then sudo ln -s /usr/share/nginx/modules-available/mod-http-passenger.load /etc/nginx/modules-enabled/50-mod-http-passenger.conf ; fi

                sudo service nginx restart

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_clone_install_opendsa:
              command: /tmp/install_nginx_passenger > /var/log/install_nginx_passenger.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"


    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y python-pip
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets full_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
Outputs:
  WebsiteURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebServer
          - PublicDnsName
        - /notes
    Description: URL for newly created Rails application
